class Solution {//怎么判断小数重复,用Hash table判断是否有循环出现
public:
    string fractionToDecimal(int numerator, int denominator){
        string result;
        //防止最小负数的绝对值超过int的最大值
        if(numerator == 0){
            return "0";
        }
        if((numerator<0)^(denominator<0))
        {
            result+='-';
        }
     unsigned int  num = abs(numerator);
     unsigned int den =  abs(denominator);
        if(numerator < 0){
            num = (unsigned int)-1 * numerator;
        }
        if(denominator < 0)
        {
            den = (unsigned int)-1 * denominator;//或者用long long
        }
        long long yu = num % den;
        long long shang = num / den;
        result += to_string(shang);
        if(yu == 0){
            return result;
        }
        
            result += '.';
        
        //只要余数一旦出现相等的，就代表循环开始了，否则直到余数为0,拿余数为key,不同的是出现的位置
        unordered_map<long long,int>mp;
        while(yu){
            //在哈希表里找有没有相同余数的
            if(mp.find(yu)!=mp.end())
            {
                int position = mp[yu];
                result = result.substr(0,position-1)+'('+result.substr(position-1,result.length()-position+1) +')';
                return result;
            }
            
            //没有找到
            shang = yu*10/den;
            result += to_string(shang);
            mp[yu] = result.length();
            yu = (yu*10)%den;
             
            
        }
        return result;
           
    }
};
